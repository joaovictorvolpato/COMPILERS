PROGRAM ::= STATEMENT 
PROGRAM ::= FUNCLIST
PROGRAM ::= ''

FUNCLIST ::= FUNCDEF FUNCLIST'

FUNCLIST' ::= FUNCDEF FUNCLIST'
FUNCLIST' ::= ''

FUNCDEF ::= def ident ( PARAMLIST ) { STATELIST }

PARAMLIST ::= PARAMLIST_TYPES ident PARAMLIST_TAIL

PARAMLIST_TAIL ::= ''
PARAMLIST_TAIL ::= , PARAMLIST

PARAMLIST_TYPES ::= int
PARAMLIST_TYPES ::= float
PARAMLIST_TYPES ::= string
PARAMLIST_TYPES ::= tint
PARAMLIST_TYPES ::= tfloat
PARAMLIST_TYPES ::= tstring

STATEMENT ::= VARDECL ;
STATEMENT ::= TUPLEDECL ;
STATEMENT ::= ATRIBSTAT ;
STATEMENT ::= PRINTSTAT ;
STATEMENT ::= READSTAT ;
STATEMENT ::= RETURNSTAT ;
STATEMENT ::= IFSTAT ;
STATEMENT ::= FORSTAT ;
STATEMENT ::= { STATELIST } ;
STATEMENT ::= break ;
STATEMENT ::= ;

TUPLEDECL ::= TTYPE ident [ int_constant ]

TTYPE ::= tint
TTYPE ::= tfloat
TTYPE ::= tstring

VARDECL ::= TYPE ident VARDECL_TAIL

TYPE ::= int
TYPE ::= float
TYPE ::= string

VARDECL_TAIL ::= [ int_constant ] VARDECL_TAIL
VARDECL_TAIL ::= ''

ATRIBSTAT ::= LVALUE = ATRIBSTAT_TAIL

ATRIBSTAT_TAIL ::= EXPRESSION
ATRIBSTAT_TAIL ::= ALLOCEXPRESSION
ATRIBSTAT_TAIL ::= FUNCCALL

FUNCCALL ::= ident( PARAMLISTCALL )

PARAMLISTCALL ::= PARAMLISTCALL_TAIL
PARAMLISTCALL ::= ''

PARAMLISTCALL_TAIL ::= ident PARAMLISTCALL_CONT

PARAMLISTCALL_CONT ::= , PARAMLISTCALL
PARAMLISTCALL_CONT ::= ''

PRINTSTAT ::= print EXPRESSION

READSTAT ::= read LVALUE

RETURNSTAT ::= return IDENTRET

IDENTRET ::= ident
IDENTRET ::= ''

IFSTAT ::= if ( EXPRESSION ) STATEMENT IF_TAIL

IF_TAIL ::= else STATEMENT
IF_TAIL::= ''

FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT

STATELIST ::= STATEMENT STATELIST_TAIL

STATELIST_TAIL ::= STATELIST
STATELIST_TAIL ::= ''


ALLOCEXPRESSION ::= new TYPE [ NUMEXPRESSION ] ALLOCEXPRESSION_TAIL_CONT

ALLOCEXPRESSION_TAIL_CONT ::= [ NUMEXPRESSION ] ALLOCEXPRESSION_TAIL_CONT
ALLOCEXPRESSION_TAIL_CONT ::= ''

BOL_EXPRESSION ::= not ( BOL_EXPRESSION )
BOL_EXPRESSION ::= EXPRESSION BOL_EXPRESSION_TAIL

BOL_EXPRESSION_TAIL ::= BOOL_OP EXPRESSION BOL_EXPRESSION_TAIL 
BOL_EXPRESSION_TAIL ::= ''

BOOL_OP ::= and
BOOL_OP ::= or
BOOL_OP ::= not

EXPRESSION ::= NUMEXPRESSION EXPRESSION_TAIL

EXPRESSION_TAIL ::= REL_OP NUMEXPRESSION
EXPRESSION_TAIL ::= '' 

REL_OP ::= < 
REL_OP ::= >
REL_OP ::= <= 
REL_OP ::= >= 
REL_OP ::= ==
REL_OP ::= !=

NUMEXPRESSION ::= TERM NUMEXPRESSION_TAIL

NUMEXPRESSION_TAIL ::= ADD_OP TERM NUMEXPRESSION_TAIL 
NUMEXPRESSION_TAIL ::= ''

ADD_OP ::= + 
ADD_OP ::= -

TERM ::= UNARYEXPR TERM_TAIL

TERM_TAIL ::= MULT_OP UNARYEXPR TERM_TAIL 
TERM_TAIL ::= ''

MULT_OP ::= * 
MULT_OP ::= /
MULT_OP ::= %

UNARYEXPR ::= UNARY_OP FACTOR 
UNARYEXPR ::= FACTOR

UNARY_OP ::= + 
UNARY_OP ::= -

FACTOR ::= int_constant
FACTOR ::= float_constant 
FACTOR ::= string_constant 
FACTOR ::= null 
FACTOR ::= LVALUE
FACTOR ::= ( NUMEXPRESSION )

LVALUE ::= ident LVALUE_TAIL

LVALUE_TAIL ::= [ NUMEXPRESSION ] LVALUE_TAIL
LVALUE_TAIL ::= ''

